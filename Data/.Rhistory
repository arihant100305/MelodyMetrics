.feature-title {
font-size: 24px;
font-weight: bold;
margin-bottom: 10px;
color: #2e7d32;
}
.feature-description {
color: #6c757d;
}
"))
),
tabItems(
# Home Page
tabItem(tabName = "home",
fluidRow(
column(12,
h1("Welcome to Music Insights", class = "text-center",
style = "margin-bottom: 40px; color: #2e7d32;")
)
),
fluidRow(
column(4,
actionButton(
"goToArtist",
div(
tags$i(class = "fa fa-music feature-icon"),
div(class = "feature-title", "Artist Explorer"),
div(class = "feature-description",
"Get information about your favorite artists")
),
class = "feature-box btn-block",
style = "border: none; background: white;"
)
),
column(4,
actionButton(
"goToRecommendations",
div(
tags$i(class = "fa fa-thumbs-up feature-icon"),
div(class = "feature-title", "Recommendations"),
div(class = "feature-description",
"Get personalized music recommendations")
),
class = "feature-box btn-block",
style = "border: none; background: white;"
)
),
column(4,
actionButton(
"goToAnalysis",
div(
tags$i(class = "fa fa-chart-line feature-icon"),
div(class = "feature-title", "Analysis"),
div(class = "feature-description",
"Deep dive into music trends and patterns")
),
class = "feature-box btn-block",
style = "border: none; background: white;"
)
),
column(4,
actionButton(
"goToTopArtists",
div(
tags$i(class = "fa fa-thumbs-up feature-icon"),
div(class = "feature-title", "Top Artists"),
div(class = "feature-description",
"Get Top Artists each Decade")
),
class = "feature-box btn-block",
style = "border: none; background: white;"
)
)
)
),
# Artist Page
tabItem(tabName = "artist",
fluidRow(
column(12,
box(width = NULL,
class = "artist-card",
fluidRow(
column(4, uiOutput("artist_image")),
column(8,
uiOutput("artist_details"),
uiOutput("artist_stats")
)
)
)
)
),
fluidRow(
column(4,
box(width = NULL,
title = "Top Tracks",
status = "primary",
solidHeader = TRUE,
uiOutput("top_tracks_list")
)
),
column(8,
box(width = NULL,
title = "Track Analysis",
status = "primary",
solidHeader = TRUE,
uiOutput("track_details"),
plotlyOutput("feature_spider_plot", height = "400px")
)
)
)
),
# Recommendations Page
tabItem(tabName = "recommendations",
fluidRow(
column(12,
box(width = NULL,
title = "Recommended Tracks",
status = "primary",
solidHeader = TRUE,
div(
class = "recommendation-info",
style = "margin-bottom: 20px; padding: 10px; background: #f8f9fa; border-radius: 5px;",
textOutput("recommendation_summary")
),
tableOutput("recommended_tracks")
)
)
)
),
# Analysis Page
tabItem(tabName = "analysis",
h2("Analysis of Popularity of songs with respect to various parameters"),
mainPanel(
plotlyOutput("analysis_plot"),
downloadButton("download_plot", "Download Plot")
)
),
tabItem(tabName = "topartists",
fluidRow(
column(12,
box(width = NULL,
title = "Top Artists by Decade",
status = "primary",
solidHeader = TRUE,
plotlyOutput("top_artists_plot", height = "600px")
)
)
)
)
)
)
)
server <- function(input, output, session) {
# Navigation handlers
observeEvent(input$goToArtist, {
updateTabItems(session, "mainMenu", "artist")
})
observeEvent(input$goToRecommendations, {
updateTabItems(session, "mainMenu", "recommendations")
})
observeEvent(input$goToAnalysis, {
updateTabItems(session, "mainMenu", "analysis")
})
observeEvent(input$goToTopArtists, {
updateTabItems(session, "mainMenu", "topartists")
})
# Track current tab for conditional sidebar
observe({
if (!is.null(input$mainMenu)) {
updateTextInput(session, "selectedTab", value = input$mainMenu)
}
})
# Loading screen
w <- Waiter$new(id = "loading-screen", html = spin_dots(), color = "rgba(255,255,255,0.9)")
# Reactive values and select input options
selected_track <- reactiveVal(NULL)
observe({
updateSelectInput(session, "artist_select", choices = sort(unique(artist_metadata$name)))
})
# ARTIST PAGE OUTPUTS
output$artist_image <- renderUI({
req(input$artist_select)
artist <- artist_metadata %>% filter(name == input$artist_select)
div(style = "text-align: center;",
img(src = artist$image_url, style = "max-width: 100%; border-radius: 10px;"))
})
output$artist_details <- renderUI({
req(input$artist_select)
artist <- artist_metadata %>% filter(name == input$artist_select)
div(
h3(artist$name, style = "margin-top: 0; color: #2c3e50;"),
p(artist$summary, style = "color: #34495e; line-height: 1.6;"),
tags$div(
style = "margin-top: 15px;",
tags$span(class = "badge bg-primary", style = "margin-right: 5px;", artist$genres)
)
)
})
output$artist_stats <- renderUI({
req(input$artist_select)
artist <- artist_metadata %>% filter(name == input$artist_select)
fluidRow(
column(6, div(class = "stats-box",
div(class = "stats-value", format(artist$followers, big.mark = ",", scientific = FALSE)),
div(class = "stats-label", "Followers"))),
column(6, div(class = "stats-box",
div(class = "stats-value", paste0(artist$popularity, "%")),
div(class = "stats-label", "Popularity")))
)
})
output$top_tracks_list <- renderUI({
req(input$artist_select)
top_tracks <- all_top_tracks %>%
filter(artist_name == input$artist_select) %>%
arrange(desc(popularity)) %>%
distinct(track_id, .keep_all = TRUE) %>%
head(input$num_top_tracks)
div(
lapply(1:nrow(top_tracks), function(i) {
track <- top_tracks[i, ]
div(
class = sprintf("track-item %s",
if (!is.null(selected_track()) && selected_track() == track$track_id)
"selected" else ""),
id = track$track_id,
onclick = sprintf("Shiny.setInputValue('selected_track_id', '%s');", track$track_id),
div(style = "display: flex; justify-content: space-between; align-items: center;",
h4(style = "margin: 0;", track$track_name))
)
})
)
})
observeEvent(input$selected_track_id, {
selected_track(input$selected_track_id)
})
observeEvent(input$artist_select, {
selected_track(NULL)
})
output$track_details <- renderUI({
req(selected_track())
track <- all_top_tracks %>% filter(track_id == selected_track()) %>% slice(1)
div(
h3(track$track_name, style = "margin-top: 0; color: #2c3e50;"),
tags$p(tags$span(style = "font-weight: bold; color: #6c757d;", "Album: "),
track$album_name),
tags$p(tags$span(style = "font-weight: bold; color: #6c757d;", "Release Year: "),
track$release_year),
tags$p(tags$span(style = "font-weight: bold; color: #6c757d;", "Popularity: "),
paste0(track$popularity, "%"))
)
})
plot_data <- reactive({
req(selected_track())
prepare_feature_data(
track_id = selected_track(),
features_df = features_df,
feature_list = c("danceability", "energy", "loudness", "speechiness",
"valence", "tempo")
)
})
output$feature_spider_plot <- renderPlotly({
create_spider_plot(plot_data(), title = "Feature Values for Selected Track")
})
# ANALYSIS PAGE
filtered_data <- reactive({
switch(input$decade,
"00s" = All00s,
"90s" = All90s,
"80s" = All80s,
"70s" = All70s,
"60s" = All60s,
"Love" = Alllove,
"Dance" = Alldance,
"Happy" = Happy,
"Sad" = Sad,
All_r
)
})
output$analysis_plot <- renderPlotly({
data <- filtered_data()
feature1 <- input$feature1
feature2 <- input$feature2
data <- data %>% mutate(decade = floor(Released / 10) * 10)
if(input$analysis_type == "Line Plot") {
average_loudness_by_year <- data %>%
group_by(.data[[feature1]]) %>%
summarize(avg_loudness = mean(.data[[feature2]], na.rm = TRUE))
# Create the interactive plot with plotly
interactive_plot <- plot_ly(data = average_loudness_by_year, x = ~.data[[feature1]], y = ~avg_loudness, type = 'scatter', mode = 'markers+lines',
marker = list(color = 'red', size = 1),
hoverinfo = 'x+y', name = paste("Average", feature2)) %>%
layout(
title = paste(feature1, "vs", feature2, "in", input$decade),
xaxis = list(
title = feature1
),
yaxis = list(title = paste("Average", feature2)),
showlegend = FALSE
)
# Display the interactive plot
interactive_plot
}
else if(input$analysis_type == "Scatter Plot") {
plot = ggplot(data, aes_string(x = feature1, y = feature2, color = "loudness")) +
geom_point(aes(size = Popularity), alpha = 1) +
geom_smooth(method = "lm", se = TRUE, color = "black", linewidth = 0.5) +
scale_color_viridis_c(option = "plasma") +
scale_size_continuous(range = c(1, 4)) +
labs(
title = paste(feature2, "vs", feature1, "in", input$decade),
subtitle = paste(feature2, "vs", feature1,
"with Loudness as color and size denoting Popularity"),
x = feature1,
y = feature2,
color = "Loudness",
size = "Popularity"
)
p_plotly <- ggplotly(plot)
p_plotly
} else if (input$analysis_type == "Correlation Matrix") {
cor_mat <- cor(data[, sapply(data, is.numeric)], use = "complete.obs")
correlation <- expand.grid(rows = rownames(cor_mat), columns = colnames(cor_mat))
correlation$value <- as.vector(cor_mat)
plot = ggplot(correlation, aes(x = rows, y = columns, fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 2)),
color = ifelse(abs(correlation$value) > 0.5, "white", "black"),
size = 3) +
scale_fill_gradient2(
low = "blue",
mid = "white",
high = "red",
midpoint = 0,
limits = c(-1, 1)
)
p_plotly <- ggplotly(plot)
p_plotly
} else if (input$analysis_type == "Violin Plot") {
happy_songs <- Happy %>% mutate(song_type = 'Happy')
sad_songs <- Sad %>% mutate(song_type = 'Sad')
# Combine the data frames
combined_songs <- bind_rows(happy_songs, sad_songs)
# Create the violin plot
fig <- plot_ly(combined_songs, y = ~.data[[feature1]], x = ~song_type, color = ~song_type,
type = 'violin', box = list(visible = TRUE),
meanline = list(visible = TRUE))
# Customize the layout
fig <- fig %>% layout(
title = paste(feature1,"Distribution in Happy and Sad Songs"),
yaxis = list(title = feature1),
xaxis = list(title = "Song Type")
)
fig
}
})
# RECOMMENDATIONS PAGE
# Check if the required columns exist in the dataset
if(!all(c("normalized_valence", "energy", "acousticness", "danceability", "era", "Popularity", "Track_Name", "Released") %in% colnames(All_r))) {
stop("Required columns are missing from the dataset!")
}
# Create mood score based on features
All_r$mood_score <- 0.35 * All_r$normalized_valence +
0.25 * All_r$energy +
0.1 * All_r$acousticness +
0.2 * All_r$danceability +
0.1 * All_r$normalized_tempo  # Assuming 'normalized_tempo' is already in [0, 1]
All_r$Released <- as.integer(All_r$Released)
# Reactive function for track recommendations
recommended_tracks <- reactive({
req(input$songs_filter, input$era_filter, input$popularity_filter)
songs_filter <- input$songs_filter
if(songs_filter=="Quiet"){
mood_filter = 0.4
}
else if (songs_filter=="Balanced"){
mood_filter=0.6
}
else if (songs_filter=="Happy"){
mood_filter = 0.7
}
else{
mood_filter <- 0.85
}
tolerance <- 0.15
# Filter data based on mood score
filtered_data <- All_r[All_r$mood_score >= (mood_filter - tolerance) &
All_r$mood_score <= (mood_filter + tolerance), ]
# Era filtering
if (!"All" %in% input$era_filter) {
filtered_data <- filtered_data[filtered_data$era %in% input$era_filter, ]
}
# Popularity filtering
if (input$popularity_filter == "Familiar (High Popularity)") {
filtered_data <- filtered_data %>%
arrange(desc(Popularity))
} else {
filtered_data <- filtered_data %>%
arrange(Popularity)
}
# Select top N recommendations
n_recommendations <- as.integer(input$num_recommendations)
filtered_data <- head(filtered_data, n = n_recommendations)
# Select display columns
filtered_data %>%
select(Track_Name, Released,  Popularity) %>%
mutate(
Released = as.integer(Released),
Popularity = paste0(round(Popularity), "%")
)
})
# Render recommendations summary
output$recommendation_summary <- renderText({
mood_level <- case_when(
input$mood_slider < 0.4 ~ "melancholic",
input$mood_slider < 0.6 ~ "balanced",
input$mood_slider < 0.8 ~ "upbeat",
TRUE ~ "very upbeat"
)
popularity_type <- if(input$popularity_filter == "Familiar (High Popularity)")
"popular" else "lesser-known"
eras <- if("All" %in% input$era_filter) "all eras" else
paste(input$era_filter, collapse = ", ")
sprintf("Showing %s %s tracks from %s with a %s mood",
input$num_recommendations,
popularity_type,
eras,
mood_level)
})
output$recommended_tracks <- renderTable({
df <- recommended_tracks()
if (nrow(df) == 0) {
return(data.frame(Message = "No tracks match your criteria."))
}
df
}, striped = TRUE, hover = TRUE, spacing = "l", align = 'l')
# Download handler for analysis plots
output$download_plot <- downloadHandler(
filename = function() {
paste("analysis-plot-", Sys.Date(), ".png", sep="")
},
content = function(file) {
ggsave(file, plot = last_plot(), device = "png", width = 10, height = 7)
}
)
observeEvent(input$goToTopArtists, {
updateTabItems(session, "mainMenu", "topartists")
})
# Add reactive for top artists data
top_artists_data <- reactive({
req(input$decade_select)
selected_decade <- as.numeric(input$decade_select)
# Unnest and process data
df_unnested <- Master_df %>%
mutate(decade = floor(Released / 10) * 10) %>%
filter(decade == selected_decade)
# Calculate mean popularity for each artist
artist_popularity <- df_unnested %>%
group_by(Artists) %>%
summarize(
mean_popularity = sum(Popularity, na.rm = TRUE),
total_tracks = n()
) %>%
filter(total_tracks >= 3) %>%  # Filter artists with at least 3 tracks
ungroup() %>%
arrange(desc(mean_popularity)) %>%
head(input$num_artists)
# Reorder factor levels based on popularity
artist_popularity$Artists <- factor(
artist_popularity$Artists,
levels = artist_popularity$Artists[order(artist_popularity$mean_popularity)]
)
artist_popularity
})
# Add plotly output for top artists
output$top_artists_plot <- renderPlotly({
data <- top_artists_data()
plot_ly(data,
x = ~mean_popularity,
y = ~Artists,
type = 'bar',
orientation = 'h',
marker = list(
color = ~mean_popularity,
colorscale = 'Viridis'
),
hoverinfo = 'text',
text = ~sprintf(
"Artist: %s<br>Mean Popularity: %.1f<br>Total Tracks: %d",
Artists, mean_popularity, total_tracks
)) %>%
layout(
title = list(
text = sprintf("Top %d Artists of the %s s",
input$num_artists,
input$decade_select),
font = list(size = 20)
),
xaxis = list(
title = "Mean Popularity Score"
),
yaxis = list(
title = "",
automargin = TRUE
),
showlegend = FALSE,
plot_bgcolor = '#e8f5e9',
paper_bgcolor = '#e8f5e9'
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
